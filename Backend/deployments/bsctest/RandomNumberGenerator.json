{
  "address": "0x665f38360Ee42Ef84A1048316397415E4efDE707",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Swaplottery",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seed",
          "type": "uint256"
        }
      ],
      "name": "getRandomNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestLotteryId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRequestId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomResult",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "name": "setKeyHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_Swaplottery",
          "type": "address"
        }
      ],
      "name": "setLotteryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewLatestLotteryId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewRandomResult",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x56070a99829cbae9b84fdaa143f3a1e30fce48290ab5bb3f9c8805a31884f2fb",
  "receipt": {
    "to": null,
    "from": "0x322dAb6325De6f5BC2Ba8efECC2bCbECac4f89F3",
    "contractAddress": "0x665f38360Ee42Ef84A1048316397415E4efDE707",
    "transactionIndex": 4,
    "gasUsed": "849887",
    "logsBloom": "0x
    "blockHash": "0x044ec7899c06a3c0fd01a06a2c495f335913ad08a9416659d7ad7c4c3ac1600b",
    "transactionHash": "0x56070a99829cbae9b84fdaa143f3a1e30fce48290ab5bb3f9c8805a31884f2fb",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 25555086,
        "transactionHash": "0x56070a99829cbae9b84fdaa143f3a1e30fce48290ab5bb3f9c8805a31884f2fb",
        "address": "0x665f38360Ee42Ef84A1048316397415E4efDE707",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000322dab6325de6f5bc2ba8efecc2bcbecac4f89f3"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x044ec7899c06a3c0fd01a06a2c495f335913ad08a9416659d7ad7c4c3ac1600b"
      }
    ],
    "blockNumber": 25555086,
    "cumulativeGasUsed": "1446273",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x699d428ee890d55D56d5FC6e26290f3247A762bd",
    "0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06"
  ],
  "numDeployments": 2,
  "solcInputHash": "ffa711cea2c103738c8e3b5a5a311500",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Swaplottery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"getRandomNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestLotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomResult\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"setKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Swaplottery\",\"type\":\"address\"}],\"name\":\"setLotteryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewLatestLotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewRandomResult\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRandomNumber(uint256)\":{\"notice\":\"Requests randomness from a user-provided seed\"},\"viewLatestLotteryId()\":{\"notice\":\"View latest lotteryId numbers\"},\"viewRandomResult()\":{\"notice\":\"Views random result\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/randomaddress.sol\":\"RandomNumberGenerator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/randomaddress.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\\n\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    function approve(address spender, uint256 value) external returns (bool success);\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function decimals() external view returns (uint8 decimalPlaces);\\n\\n    function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n    function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n    function name() external view returns (string memory tokenName);\\n\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n    function transfer(address to, uint256 value) external returns (bool success);\\n\\n    function transferAndCall(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool success);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool success);\\n}\\n\\n// File: @chainlink/contracts/src/v0.8/dev/VRFRequestIDBase.sol\\n\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n    /**\\n     * @notice returns the seed which is actually input to the VRF coordinator\\n     *\\n     * @dev To prevent repetition of VRF output due to repetition of the\\n     * @dev user-supplied seed, that seed is combined in a hash with the\\n     * @dev user-specific nonce, and the address of the consuming contract. The\\n     * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n     * @dev the final seed, but the nonce does protect against repetition in\\n     * @dev requests which are included in a single block.\\n     *\\n     * @param _userSeed VRF seed input provided by user\\n     * @param _requester Address of the requesting contract\\n     * @param _nonce User-specific nonce at the time of the request\\n     */\\n    function makeVRFInputSeed(\\n        bytes32 _keyHash,\\n        uint256 _userSeed,\\n        address _requester,\\n        uint256 _nonce\\n    ) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n    }\\n\\n    /**\\n     * @notice Returns the id for this request\\n     * @param _keyHash The serviceAgreement ID to be used for this request\\n     * @param _vRFInputSeed The seed to be passed directly to the VRF\\n     * @return The id for this request\\n     *\\n     * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n     * @dev contract, but the one generated by makeVRFInputSeed\\n     */\\n    function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n    }\\n}\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n    /**\\n     * @notice fulfillRandomness handles the VRF response. Your contract must\\n     * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n     * @notice principles to keep in mind when implementing your fulfillRandomness\\n     * @notice method.\\n     *\\n     * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n     * @dev signature, and will call it once it has verified the proof\\n     * @dev associated with the randomness. (It is triggered via a call to\\n     * @dev rawFulfillRandomness, below.)\\n     *\\n     * @param requestId The Id initially returned by requestRandomness\\n     * @param randomness the VRF output\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n    /**\\n     * @notice requestRandomness initiates a request for VRF output given _seed\\n     *\\n     * @dev The fulfillRandomness method receives the output, once it's provided\\n     * @dev by the Oracle, and verified by the vrfCoordinator.\\n     *\\n     * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n     * @dev the _fee must exceed the fee specified during registration of the\\n     * @dev _keyHash.\\n     *\\n     * @dev The _seed parameter is vestigial, and is kept only for API\\n     * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n     * @dev your own randomness, here, but it's not necessary because the VRF\\n     * @dev oracle will mix the hash of the block containing your request into the\\n     * @dev VRF seed it ultimately uses.\\n     *\\n     * @param _keyHash ID of public key against which randomness is generated\\n     * @param _fee The amount of LINK to send with the request\\n     * @param _seed seed mixed into the input of the VRF.\\n     *\\n     * @return requestId unique ID for this request\\n     *\\n     * @dev The returned requestId can be used to distinguish responses to\\n     * @dev concurrent requests. It is passed as the first argument to\\n     * @dev fulfillRandomness.\\n     */\\n    function requestRandomness(\\n        bytes32 _keyHash,\\n        uint256 _fee,\\n        uint256 _seed\\n    ) internal returns (bytes32 requestId) {\\n        LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\\n        // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n        // the hash of the block containing this request to obtain the seed/input\\n        // which is finally passed to the VRF cryptographic machinery.\\n        uint256 vRFSeed = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\\n        // nonces[_keyHash] must stay in sync with\\n        // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n        // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n        // This provides protection against the user repeating their input seed,\\n        // which would result in a predictable/duplicate output, if multiple such\\n        // requests appeared in the same block.\\n        nonces[_keyHash] = nonces[_keyHash] + 1;\\n        return makeRequestId(_keyHash, vRFSeed);\\n    }\\n\\n    LinkTokenInterface internal immutable LINK;\\n    address private immutable vrfCoordinator;\\n\\n    // Nonces for each VRF key from which randomness has been requested.\\n    //\\n    // Must stay in sync with VRFCoordinator[_keyHash][this]\\n    mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n        private nonces;\\n\\n    /**\\n     * @param _vrfCoordinator address of VRFCoordinator contract\\n     * @param _link address of LINK token contract\\n     *\\n     * @dev https://docs.chain.link/docs/link-token-contracts\\n     */\\n    constructor(address _vrfCoordinator, address _link) {\\n        vrfCoordinator = _vrfCoordinator;\\n        LINK = LinkTokenInterface(_link);\\n    }\\n\\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n    // the origin of the call\\n    function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n        require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n        fulfillRandomness(requestId, randomness);\\n    }\\n}\\n\\n// File: contracts/interfaces/IRandomNumberGenerator.sol\\n\\npragma solidity ^0.8.4;\\n\\ninterface IRandomNumberGenerator {\\n    /**\\n     * Requests randomness from a user-provided seed\\n     */\\n    function getRandomNumber(uint256 _seed) external;\\n\\n    /**\\n     * View latest lotteryId numbers\\n     */\\n    function viewLatestLotteryId() external view returns (uint256);\\n\\n    /**\\n     * Views random result\\n     */\\n    function viewRandomResult() external view returns (uint32);\\n}\\n\\npragma solidity ^0.8.4;\\n\\ninterface ISwaplottery {\\n    /**\\n     * @notice Buy tickets for the current lottery\\n     * @param _lotteryId: lotteryId\\n     * @param _ticketNumbers: array of ticket numbers between 1,000,000 and 1,999,999\\n     * @dev Callable by users\\n     */\\n    function buyTickets(uint256 _lotteryId, uint32[] calldata _ticketNumbers) external;\\n\\n    /**\\n     * @notice Claim a set of winning tickets for a lottery\\n     * @param _lotteryId: lottery id\\n     * @param _ticketIds: array of ticket ids\\n     * @param _brackets: array of brackets for the ticket ids\\n     * @dev Callable by users only, not contract!\\n     */\\n    function claimTickets(\\n        uint256 _lotteryId,\\n        uint256[] calldata _ticketIds,\\n        uint32[] calldata _brackets\\n    ) external;\\n\\n    /**\\n     * @notice Close lottery\\n     * @param _lotteryId: lottery id\\n     * @dev Callable by operator\\n     */\\n    function closeLottery(uint256 _lotteryId) external;\\n\\n    /**\\n     * @notice Draw the final number, calculate reward in CAKE per group, and make lottery claimable\\n     * @param _lotteryId: lottery id\\n     * @param _autoInjection: reinjects funds into next lottery (vs. withdrawing all)\\n     * @dev Callable by operator\\n     */\\n    function drawFinalNumberAndMakeLotteryClaimable(uint256 _lotteryId, bool _autoInjection) external;\\n\\n    function injectFunds(uint256 _lotteryId, uint256 _amount) external;\\n\\n    function startLottery(\\n        uint256 _endTime,\\n        uint256 _priceTicketInCake,\\n        uint256 _discountDivisor,\\n        uint256[6] calldata _rewardsBreakdown,\\n        uint256 _treasuryFee\\n    ) external;\\n\\n    function viewCurrentLotteryId() external returns (uint256);\\n}\\n\\npragma solidity ^0.8.4;\\n\\ncontract RandomNumberGenerator is VRFConsumerBase, IRandomNumberGenerator, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address public Swaplottery;\\n    bytes32 public keyHash;\\n    bytes32 public latestRequestId;\\n    uint32 public randomResult;\\n    uint256 public fee;\\n    uint256 public latestLotteryId;\\n\\n    constructor(address _vrfCoordinator, address _linkToken) VRFConsumerBase(_vrfCoordinator, _linkToken) {\\n\\n    }\\n\\n    function getRandomNumber(uint256 _seed) external override {\\n        require(msg.sender == Swaplottery, \\\"Only Swaplottery\\\");\\n        require(keyHash != bytes32(0), \\\"Must have valid key hash\\\");\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK tokens\\\");\\n\\n        latestRequestId = requestRandomness(keyHash, fee, _seed);\\n    }\\n\\n    function setFee(uint256 _fee) external onlyOwner {\\n        fee = _fee;\\n    }\\n\\n    function setKeyHash(bytes32 _keyHash) external onlyOwner {\\n        keyHash = _keyHash;\\n    }\\n\\n    function setLotteryAddress(address _Swaplottery) external onlyOwner {\\n        Swaplottery = _Swaplottery;\\n    }\\n\\n    function withdrawTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\\n    }\\n\\n    function viewLatestLotteryId() external view override returns (uint256) {\\n        return latestLotteryId;\\n    }\\n\\n    function viewRandomResult() external view override returns (uint32) {\\n        return randomResult;\\n    }\\n\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        require(latestRequestId == requestId, \\\"Wrong requestId\\\");\\n        randomResult = uint32(1000000 + (randomness % 1000000));\\n        latestLotteryId = ISwaplottery(Swaplottery).viewCurrentLotteryId();\\n    }\\n}\",\"keccak256\":\"0x70a4fb886d3314bf65d97c16ccdfd80c707cc6bbfc970c8195aacaa9d78ea6c2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610eff380380610eff83398101604081905261002f916100a8565b6001600160a01b0382811660a0528116608052600180546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35050506100db565b80516001600160a01b03811681146100a357600080fd5b919050565b600080604083850312156100bb57600080fd5b6100c48361008c565b91506100d26020840161008c565b90509250929050565b60805160a051610df161010e6000396000818161038e015261081a0152600081816104e801526107eb0152610df16000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806394985ddd116100a2578063b37217a411610071578063b37217a414610209578063ddca3f431461021c578063eed8e1ee14610225578063f2fde38b1461022e578063fbe5d9171461024157600080fd5b806394985ddd146101c257806398544710146101d5578063a1c4f55a146101e8578063b2bfb71d146101f657600080fd5b806361728f39116100de57806361728f391461017957806369fe0e2d14610182578063715018a6146101955780638da5cb5b1461019d57600080fd5b806306b091f9146101105780631aa46f59146101255780632a332b2a1461014157806342619f6614610154575b600080fd5b61012361011e366004610bd9565b610249565b005b61012e60045481565b6040519081526020015b60405180910390f35b61012361014f366004610c03565b610294565b6005546101649063ffffffff1681565b60405163ffffffff9091168152602001610138565b61012e60035481565b610123610190366004610c1e565b6102e0565b61012361030f565b6001546001600160a01b03165b6040516001600160a01b039091168152602001610138565b6101236101d0366004610c37565b610383565b6101236101e3366004610c1e565b610405565b60055463ffffffff16610164565b6002546101aa906001600160a01b031681565b610123610217366004610c1e565b610434565b61012e60065481565b61012e60075481565b61012361023c366004610c03565b6105b7565b60075461012e565b6001546001600160a01b0316331461027c5760405162461bcd60e51b815260040161027390610c59565b60405180910390fd5b6102906001600160a01b03831633836106a2565b5050565b6001546001600160a01b031633146102be5760405162461bcd60e51b815260040161027390610c59565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b0316331461030a5760405162461bcd60e51b815260040161027390610c59565b600655565b6001546001600160a01b031633146103395760405162461bcd60e51b815260040161027390610c59565b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180546001600160a01b0319169055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103fb5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c006044820152606401610273565b61029082826106f9565b6001546001600160a01b0316331461042f5760405162461bcd60e51b815260040161027390610c59565b600355565b6002546001600160a01b031633146104815760405162461bcd60e51b815260206004820152601060248201526f4f6e6c7920537761706c6f747465727960801b6044820152606401610273565b6003546104d05760405162461bcd60e51b815260206004820152601860248201527f4d75737420686176652076616c6964206b6579206861736800000000000000006044820152606401610273565b6006546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055b9190610c8e565b10156105a25760405162461bcd60e51b81526020600482015260166024820152754e6f7420656e6f756768204c494e4b20746f6b656e7360501b6044820152606401610273565b6105b1600354600654836107e7565b60045550565b6001546001600160a01b031633146105e15760405162461bcd60e51b815260040161027390610c59565b6001600160a01b0381166106465760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610273565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526106f4908490610944565b505050565b816004541461073c5760405162461bcd60e51b815260206004820152600f60248201526e15dc9bdb99c81c995c5d595cdd1259608a1b6044820152606401610273565b610749620f424082610ca7565b61075690620f4240610cc9565b6005805463ffffffff191663ffffffff9290921691909117905560025460408051630405030b60e51b815290516001600160a01b03909216916380a061609160048082019260209290919082900301816000875af11580156107bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e09190610c8e565b6007555050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f0000000000000000000000000000000000000000000000000000000000000000858786604051602001610856929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161088393929190610d3a565b6020604051808303816000875af11580156108a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c69190610d6a565b5060008481526020818152604080832054815180840189905280830187905230606082015260808082018390528351808303909101815260a090910190925281519183019190912087845292909152610920906001610cc9565b6000868152602081905260409020556109398582610a16565b9150505b9392505050565b6000610999826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a459092919063ffffffff16565b8051909150156106f457808060200190518101906109b79190610d6a565b6106f45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610273565b604080516020808201859052818301849052825180830384018152606090920190925280519101205b92915050565b6060610a548484600085610a5c565b949350505050565b606082471015610abd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610273565b843b610b0b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610273565b600080866001600160a01b03168587604051610b279190610d8c565b60006040518083038185875af1925050503d8060008114610b64576040519150601f19603f3d011682016040523d82523d6000602084013e610b69565b606091505b5091509150610b79828286610b84565b979650505050505050565b60608315610b9357508161093d565b825115610ba35782518084602001fd5b8160405162461bcd60e51b81526004016102739190610da8565b80356001600160a01b0381168114610bd457600080fd5b919050565b60008060408385031215610bec57600080fd5b610bf583610bbd565b946020939093013593505050565b600060208284031215610c1557600080fd5b61093d82610bbd565b600060208284031215610c3057600080fd5b5035919050565b60008060408385031215610c4a57600080fd5b50508035926020909101359150565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215610ca057600080fd5b5051919050565b600082610cc457634e487b7160e01b600052601260045260246000fd5b500690565b80820180821115610a3f57634e487b7160e01b600052601160045260246000fd5b60005b83811015610d05578181015183820152602001610ced565b50506000910152565b60008151808452610d26816020860160208601610cea565b601f01601f19169290920160200192915050565b60018060a01b0384168152826020820152606060408201526000610d616060830184610d0e565b95945050505050565b600060208284031215610d7c57600080fd5b8151801515811461093d57600080fd5b60008251610d9e818460208701610cea565b9190910192915050565b60208152600061093d6020830184610d0e56fea26469706673582212205dab08b74fac2300af3ec800795152c6ed39e587ec286610080d4b36bbd14d1b64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806394985ddd116100a2578063b37217a411610071578063b37217a414610209578063ddca3f431461021c578063eed8e1ee14610225578063f2fde38b1461022e578063fbe5d9171461024157600080fd5b806394985ddd146101c257806398544710146101d5578063a1c4f55a146101e8578063b2bfb71d146101f657600080fd5b806361728f39116100de57806361728f391461017957806369fe0e2d14610182578063715018a6146101955780638da5cb5b1461019d57600080fd5b806306b091f9146101105780631aa46f59146101255780632a332b2a1461014157806342619f6614610154575b600080fd5b61012361011e366004610bd9565b610249565b005b61012e60045481565b6040519081526020015b60405180910390f35b61012361014f366004610c03565b610294565b6005546101649063ffffffff1681565b60405163ffffffff9091168152602001610138565b61012e60035481565b610123610190366004610c1e565b6102e0565b61012361030f565b6001546001600160a01b03165b6040516001600160a01b039091168152602001610138565b6101236101d0366004610c37565b610383565b6101236101e3366004610c1e565b610405565b60055463ffffffff16610164565b6002546101aa906001600160a01b031681565b610123610217366004610c1e565b610434565b61012e60065481565b61012e60075481565b61012361023c366004610c03565b6105b7565b60075461012e565b6001546001600160a01b0316331461027c5760405162461bcd60e51b815260040161027390610c59565b60405180910390fd5b6102906001600160a01b03831633836106a2565b5050565b6001546001600160a01b031633146102be5760405162461bcd60e51b815260040161027390610c59565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b0316331461030a5760405162461bcd60e51b815260040161027390610c59565b600655565b6001546001600160a01b031633146103395760405162461bcd60e51b815260040161027390610c59565b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180546001600160a01b0319169055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103fb5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c006044820152606401610273565b61029082826106f9565b6001546001600160a01b0316331461042f5760405162461bcd60e51b815260040161027390610c59565b600355565b6002546001600160a01b031633146104815760405162461bcd60e51b815260206004820152601060248201526f4f6e6c7920537761706c6f747465727960801b6044820152606401610273565b6003546104d05760405162461bcd60e51b815260206004820152601860248201527f4d75737420686176652076616c6964206b6579206861736800000000000000006044820152606401610273565b6006546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055b9190610c8e565b10156105a25760405162461bcd60e51b81526020600482015260166024820152754e6f7420656e6f756768204c494e4b20746f6b656e7360501b6044820152606401610273565b6105b1600354600654836107e7565b60045550565b6001546001600160a01b031633146105e15760405162461bcd60e51b815260040161027390610c59565b6001600160a01b0381166106465760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610273565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526106f4908490610944565b505050565b816004541461073c5760405162461bcd60e51b815260206004820152600f60248201526e15dc9bdb99c81c995c5d595cdd1259608a1b6044820152606401610273565b610749620f424082610ca7565b61075690620f4240610cc9565b6005805463ffffffff191663ffffffff9290921691909117905560025460408051630405030b60e51b815290516001600160a01b03909216916380a061609160048082019260209290919082900301816000875af11580156107bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e09190610c8e565b6007555050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f0000000000000000000000000000000000000000000000000000000000000000858786604051602001610856929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161088393929190610d3a565b6020604051808303816000875af11580156108a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c69190610d6a565b5060008481526020818152604080832054815180840189905280830187905230606082015260808082018390528351808303909101815260a090910190925281519183019190912087845292909152610920906001610cc9565b6000868152602081905260409020556109398582610a16565b9150505b9392505050565b6000610999826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a459092919063ffffffff16565b8051909150156106f457808060200190518101906109b79190610d6a565b6106f45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610273565b604080516020808201859052818301849052825180830384018152606090920190925280519101205b92915050565b6060610a548484600085610a5c565b949350505050565b606082471015610abd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610273565b843b610b0b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610273565b600080866001600160a01b03168587604051610b279190610d8c565b60006040518083038185875af1925050503d8060008114610b64576040519150601f19603f3d011682016040523d82523d6000602084013e610b69565b606091505b5091509150610b79828286610b84565b979650505050505050565b60608315610b9357508161093d565b825115610ba35782518084602001fd5b8160405162461bcd60e51b81526004016102739190610da8565b80356001600160a01b0381168114610bd457600080fd5b919050565b60008060408385031215610bec57600080fd5b610bf583610bbd565b946020939093013593505050565b600060208284031215610c1557600080fd5b61093d82610bbd565b600060208284031215610c3057600080fd5b5035919050565b60008060408385031215610c4a57600080fd5b50508035926020909101359150565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215610ca057600080fd5b5051919050565b600082610cc457634e487b7160e01b600052601260045260246000fd5b500690565b80820180821115610a3f57634e487b7160e01b600052601160045260246000fd5b60005b83811015610d05578181015183820152602001610ced565b50506000910152565b60008151808452610d26816020860160208601610cea565b601f01601f19169290920160200192915050565b60018060a01b0384168152826020820152606060408201526000610d616060830184610d0e565b95945050505050565b600060208284031215610d7c57600080fd5b8151801515811461093d57600080fd5b60008251610d9e818460208701610cea565b9190910192915050565b60208152600061093d6020830184610d0e56fea26469706673582212205dab08b74fac2300af3ec800795152c6ed39e587ec286610080d4b36bbd14d1b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getRandomNumber(uint256)": {
        "notice": "Requests randomness from a user-provided seed"
      },
      "viewLatestLotteryId()": {
        "notice": "View latest lotteryId numbers"
      },
      "viewRandomResult()": {
        "notice": "Views random result"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4437,
        "contract": "contracts/randomaddress.sol:RandomNumberGenerator",
        "label": "nonces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3525,
        "contract": "contracts/randomaddress.sol:RandomNumberGenerator",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4575,
        "contract": "contracts/randomaddress.sol:RandomNumberGenerator",
        "label": "Swaplottery",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4577,
        "contract": "contracts/randomaddress.sol:RandomNumberGenerator",
        "label": "keyHash",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 4579,
        "contract": "contracts/randomaddress.sol:RandomNumberGenerator",
        "label": "latestRequestId",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 4581,
        "contract": "contracts/randomaddress.sol:RandomNumberGenerator",
        "label": "randomResult",
        "offset": 0,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 4583,
        "contract": "contracts/randomaddress.sol:RandomNumberGenerator",
        "label": "fee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4585,
        "contract": "contracts/randomaddress.sol:RandomNumberGenerator",
        "label": "latestLotteryId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}